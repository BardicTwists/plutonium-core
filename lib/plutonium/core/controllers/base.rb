module Plutonium
  module Core
    module Controllers
      module Base
        extend ActiveSupport::Concern
        include Plutonium::Core::Controllers::Bootable
        include Plutonium::Core::Controllers::EntityScoping

        included do
          add_flash_types :success, :warning, :error

          before_action :set_page_title

          before_action do
            next unless defined?(ActiveStorage)

            ActiveStorage::Current.url_options = {protocol: request.protocol, host: request.host, port: request.port}
          end

          helper Plutonium::Helpers
          helper_method :resource_url_for
          helper_method :resource_url_args_for

          append_view_path File.expand_path("app/views", Plutonium.root)
          layout -> { turbo_frame_request? ? false : "resource" }
        end

        private

        def set_page_title
          @page_title = "Pluton8"
        end

        #
        # Returns a dynamic list of args to be used with `url_for` which considers the route namespace and nesting.
        # The current entity and parent record (for nested routes) are inserted appropriately, ensuring that generated urls
        # obey the current routing.
        #
        # e.g. of route helpers that will be invoked given the output of this method
        #
        # - when invoked in a root route (/acme/dashboard/users)
        #
        # `resource_url_args_for User`                   => `entity_users_*`
        # `resource_url_args_for @user`                  => `entity_user_*`
        # `resource_url_args_for @user, action: :edit`   => `edit_entity_user_*`
        # `resource_url_args_for @user, Post             => `entity_user_posts_*`
        #
        # - when invoked in a nested route (/acme/dashboard/users/1/post/1)
        #
        # `resource_url_args_for Post`                   => `entity_user_posts_*`
        # `resource_url_args_for @post`                  => `entity_user_post_*`
        # `resource_url_args_for @post, action: :edit`   => `edit_entity_user_post_*`
        #
        # @param [Class, ApplicationRecord] *args arguments you would normally pass to `url_for`
        # @param [Symbol] action optional action to invoke e.g. :new, :edit
        #
        # @return [Array[Class, ApplicationRecord, Symbol]] args to pass to `url_for`
        #
        def resource_url_args_for(*args, action: nil, parent: nil, **kwargs)
          # If the last item is a class and the action is :new e.g. `resource_url User, action: :new`,
          # it must be converted into a symbol to generate the appropriate helper i.e `new_user_*`
          # to match the url helper generated by `resources :users`
          resource = args.pop
          resource = resource.model_name.singular_route_key.to_sym if action == :new && resource.is_a?(Class)
          args.push resource

          base_args = if scoped_to_entity?
            [action, current_scoped_entity.becomes(scoped_entity_class), parent]
          else
            [action, parent]
          end

          # rails compacts this list. no need to handle nils
          base_args + args + [**kwargs]
        end

        def resource_url_for(...)
          send(current_package.name.underscore.to_sym).url_for(resource_url_args_for(...))
        end
      end
    end
  end
end
